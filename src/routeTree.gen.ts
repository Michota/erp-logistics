/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/~__root'
import { Route as RouteRouteImport } from './routes/~route/~route'
import { Route as RouteRouteIdIndexImport } from './routes/~route/~$routeId/~index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const RouteRouteRoute = RouteRouteImport.update({
  id: '/route',
  path: '/route',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/~index.lazy').then((d) => d.Route))

const RouteRouteIdIndexRoute = RouteRouteIdIndexImport.update({
  id: '/$routeId/',
  path: '/$routeId/',
  getParentRoute: () => RouteRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/route': {
      id: '/route'
      path: '/route'
      fullPath: '/route'
      preLoaderRoute: typeof RouteRouteImport
      parentRoute: typeof rootRoute
    }
    '/route/$routeId/': {
      id: '/route/$routeId/'
      path: '/$routeId'
      fullPath: '/route/$routeId'
      preLoaderRoute: typeof RouteRouteIdIndexImport
      parentRoute: typeof RouteRouteImport
    }
  }
}

// Create and export the route tree

interface RouteRouteRouteChildren {
  RouteRouteIdIndexRoute: typeof RouteRouteIdIndexRoute
}

const RouteRouteRouteChildren: RouteRouteRouteChildren = {
  RouteRouteIdIndexRoute: RouteRouteIdIndexRoute,
}

const RouteRouteRouteWithChildren = RouteRouteRoute._addFileChildren(
  RouteRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/route': typeof RouteRouteRouteWithChildren
  '/route/$routeId': typeof RouteRouteIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/route': typeof RouteRouteRouteWithChildren
  '/route/$routeId': typeof RouteRouteIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/route': typeof RouteRouteRouteWithChildren
  '/route/$routeId/': typeof RouteRouteIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/route' | '/route/$routeId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/route' | '/route/$routeId'
  id: '__root__' | '/' | '/route' | '/route/$routeId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  RouteRouteRoute: typeof RouteRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  RouteRouteRoute: RouteRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/route"
      ]
    },
    "/": {
      "filePath": "~index.lazy.tsx"
    },
    "/route": {
      "filePath": "~route/~route.tsx",
      "children": [
        "/route/$routeId/"
      ]
    },
    "/route/$routeId/": {
      "filePath": "~route/~$routeId/~index.tsx",
      "parent": "/route"
    }
  }
}
ROUTE_MANIFEST_END */
